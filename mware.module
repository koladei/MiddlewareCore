<?php

include_once 'mware_entities_def.inc';

require_once __DIR__ . str_replace('/', DIRECTORY_SEPARATOR, "/vendor/autoload.php");

spl_autoload_register(function ($class) {

    $path = "lib";
    $pa = str_replace('\\', DIRECTORY_SEPARATOR, "{$path}\\{$class}" . '.php');
    @include $pa;
});

/**
 * Implement hook_menu().
 */
function mware_menu() {
    $items = [];

    $items['admin/config/administration/mware'] = [
        'title' => 'Middleware',
        'description' => 'Use this page to provide settings for the Middleware application',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['mware_admin'],
        'access arguments' => ['mware administer settings'],
        'file path' => drupal_get_path('module', 'mware') . '/forms',
        'file' => 'admin.inc',
        'type' => MENU_NORMAL_ITEM,
    ];

    $items['admin/config/administration/mware/settings'] = [
        'title' => 'Middleware',
        'description' => 'Use this page to provide settings for the Middleware application',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['mware_admin'],
        'access arguments' => ['mware administer settings'],
        'file path' => drupal_get_path('module', 'mware') . '/forms',
        'file' => 'admin.inc',
        'type' => MENU_DEFAULT_LOCAL_TASK,
    ];

    $items['admin/config/administration/mware/manage'] = [
        'title' => 'Propagation Log Admin',
        'description' => 'Manage Propagation Log structure',
        'page callback' => 'mware_propagation_log_info',
        'page arguments' => ['mware_propagation_log_info'],
        'access arguments' => ['administer mware_propagation_logs'],
        'file' => 'mware_entities_def.inc',
        'type' => MENU_LOCAL_TASK,
    ];

    $items['mware_propagation_log/%mware_propagation_log'] = [
        'title callback' => 'mware_propagation_log_page_title',
        'title arguments' => [1],
        'page callback' => 'mware_propagation_log_page_view',
        'page arguments' => [1],
        'access arguments' => ['view mware_propagation_logs'],
        'type' => MENU_CALLBACK,
    ];

    $items['admin/structure/mware_propagation_logs/manage'] = array(
        'title' => 'Middleware Event Log Admin',
        'description' => 'Manage Middleware Event Log structure',
        'page callback' => 'mware_propagation_log_info',
        'access arguments' => array('administer mware_propagation_logs'),
    );

    $items['mware_propagation_log/add'] = [
        'title' => 'Add PostIT!',
        'page callback' => 'mware_propagation_log_add',
        'access arguments' => ['create mware_propagation_log'],
    ];

    return $items;
}

/**
 * Implements hook_permission
 * @return array
 */
function mware_permission() {
    $permission = [
        'mware administer settings' => [
            'title' => t('Administer settings'),
            'description' => t('Manage Middleware and it\'s dependencies\' settings.'),
        ],
        'administer mware_propagation_logs' => [
            'title' => t('Administer mware_propagation_logs'),
            'restrict access' => TRUE,
        ],
        'view mware_propagation_log' => [
            'title' => t('View PostIts'),
        ]
    ];
    return $permission;
}

/**
 * Implements hook_library
 * @return array
 */
function mware_library() {
    $libraries = [];

    return $libraries;
}

/**
 * Implements hook_ctools_plugin_api
 * @param type $owner
 * @param type $api
 * @return type
 */
function mware_ctools_plugin_api($owner, $api) {
    if ($owner == 'services' && $api == 'services') {
        return [
            'version' => 3,
            'file' => 'endpoints.inc', // Optional parameter to indicate the file name to load.
            'path' => drupal_get_path('module', 'mware'), // If specifying the file key, path is required.
        ];
    }
}

/**
 * Processes a URI rquest.
 * @param string $url
 * @param array $settings
 */
function mware_http_request($url, $settings = []) {

    $request = new \cURL\Request($url);
    $request->getOptions()
            ->set(CURLOPT_TIMEOUT, 10)->set(CURLOPT_RETURNTRANSFER, true);

    if (isset($settings['options'])) {
        $default = $settings['options'];
        foreach ($default as $key => $value) {
            $request->getOptions()->set($key, $value);
        }
    }

    //Add the listener
    $request->addListener('complete', $settings['callback']);

    while ($request->socketPerform()) {
        $request->socketSelect();
    }
}

/**
 * Processes a URI rquest.
 * @param string $url
 * @param array $settings
 */
function mware_blocking_http_request($url, $settings = []) {

    $request = new \cURL\Request($url);
    $request->getOptions()
            ->set(CURLOPT_TIMEOUT, 10)
            ->set(CURLOPT_RETURNTRANSFER, true);

    // Set other request options
    if (isset($settings['options'])) {
        $default = $settings['options'];
        foreach ($default as $key => $value) {
            $request->getOptions()->set($key, $value);
        }
    }

    $response = $request->send();
    return $response;
}
